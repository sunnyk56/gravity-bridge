syntax = "proto3";
package gravity.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/cosmos/gravity-bridge/module/x/gravity/types";

// ClaimType is the cosmos type of an event from the counterpart chain that can
// be handled

enum ClaimType {
  option (gogoproto.goproto_enum_prefix) = false;

  CLAIM_TYPE_UNSPECIFIED         = 0;
  CLAIM_TYPE_DEPOSIT             = 1;
  CLAIM_TYPE_WITHDRAW            = 2;
  CLAIM_TYPE_ERC20_DEPLOYED      = 3;
  CLAIM_TYPE_LOGIC_CALL_EXECUTED = 4;
  CLAIM_TYPE_VALSET_UPDATED      = 5;
}

// Attestation is an aggregate of `claims` that eventually becomes `observed` by
// all orchestrators
message Attestation {
  // This field stores whether the Attestation has had its event applied to the Cosmos state. This happens when
  // enough (usually >2/3s) of the validator power votes that they saw the event on Ethereum.
  // For example, once a DepositClaim has modified the token balance of the account that it was deposited to,
  // this boolean will be set to true.
  bool observed = 1;
  // This is an array of the addresses of the validators which have voted that they saw the event on Ethereum.
  repeated string votes = 2;
  // This is the Cosmos block height that this event was first observed by a validator.
  uint64 height = 3;
  // The claim is the Ethereum event that this attestation is recording votes for.
  google.protobuf.Any claim = 4;
}

// ERC20Token unique identifier for an Ethereum ERC20 token.
// CONTRACT:
// The contract address on ETH of the token, this could be a Cosmos
// originated token, if so it will be the ERC20 address of the representation
// (note: developers should look up the token symbol using the address on ETH to display for UI)
message ERC20Token {
  string contract = 1;
  string amount   = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
}
